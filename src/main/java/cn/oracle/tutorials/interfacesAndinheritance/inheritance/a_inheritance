
1.A subclass inherits all of the public and protected members of its parent, no matter what package the subclass is in. 
	If the subclass is in the same package as its parent, it also inherits the package-private members of the parent. 
	
2.You can use the inherited members as is, replace them, hide them, or supplement them with new members:
	
		●The inherited fields can be used directly, just like any other fields.
		●You can declare a field in the subclass with the same name as the one in the superclass, thus hiding it (not recommended).
		
		●The inherited methods can be used directly as they are.
		●You can write a new instance method in the subclass that has the same signature and return type as the one in the superclass, thus overriding it.
		●You can write a new static method in the subclass that has the same signature as the one in the superclass, thus hiding it.
		
		
		●You can write a subclass constructor that invokes the constructor of the superclass, either implicitly or by using the keyword super.
		

3.methods invoked 
	●The version of the overridden instance method that gets invoked is the one in the subclass.
	●The version of the hidden static method that gets invoked depends on whether it is invoked from the superclass or the subclass.
	
4.fields access
	●The version of the hidden fields that gets accessed depends on whether it is invoked from the superclass or the subclass.
	
	
5.interface methods
	Default methods and abstract methods in interfaces are inherited like instance methods. 
		However, when the supertypes of a class or interface provide multiple default methods with the same signature, 
		the Java compiler follows inheritance rules to resolve the name conflict. These rules are driven by the following two principles:
		
	●Instance methods are preferred over interface default methods.
	●Methods that are already overridden by other candidates are ignored.
	

6.conflicts
	●If two or more independently defined default methods conflict, or a default method conflicts with an abstract method, 
		then the Java compiler produces a compiler error. You must explicitly override the supertype methods.
		
		[ExtendedInterfaceName].super.[defaultMethod]
		
	
7.override abstract interface methods in superclass
	inherited instance methods from classes can override abstract interface methods. Consider the following interfaces and classes:
	

8.Modifiers
	The access specifier for an overriding method can allow more, but not less, access than the overridden method
	