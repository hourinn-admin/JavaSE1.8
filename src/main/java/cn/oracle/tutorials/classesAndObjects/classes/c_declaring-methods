1.Method declarations have six components, in order:

	1.Modifiers—such as public, private, and others you will learn about later.
	2.The return type—the data type of the value returned by the method, or void if the method does not return a value.
	3.The method name—the rules for field names apply to method names as well, but the convention is a little different.
	4.The parameter list in parenthesis—a comma-delimited list of input parameters, preceded by their data types, enclosed by parentheses, (). 
		If there are no parameters, you must use empty parentheses.
	5.An exception list—to be discussed later.
	6.The method body, enclosed between braces—the method's code, including the declaration of local variables, goes here.
	
	*Modifiers, return types, and parameters will be discussed now. Exceptions are discussed later
	
	Definition: Two of the components of a method declaration comprise the method signature—the method's name and the parameter types.	
		The signature of the method declared above is:
		
			calculateAnswer(double, int, double, double)


2.The convetion of naming a method:
	 By convention, method names should be a verb in lowercase or a multi-word name that begins with a verb in lowercase.

3.overloading methods
	.Java can distinguish between methods with different method signatures.
		This means that methods within a class can have the same name if they have different parameter lists(overloading methods).
	
	*The compiler does not consider return type when differentiating methods, 
		so you cannot declare two methods with the same signature even if they have a different return type.

